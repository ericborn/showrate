#setting working directory and installing packages for later use
setwd("e:/Appt")
install.packages('rpart')
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
install.packages('randomForest')
install.packages('party')
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
library(party)

#importing raw data pulled via SQL and exported to csv
train <- read.csv("appt_train.csv")
test <- read.csv("appt_test.csv")

#view the structure of the table
str(train)

#setting up tod (time of day) column in each dataset
train$tod <- 0 #morning 7-11:30
train$tod[train$time < 1500 & train$time >= 1140] <- 1 #mid day 1140-3
train$tod[train$time >= 1510] <- 2 #evening 3:10-7

test$tod <- 0 #morning 7-11:30
test$tod[test$time < 1500 & test$time >= 1140] <- 1 #mid day 1140-3
test$tod[test$time >= 1510] <- 2 #evening 3:10-7

#creating age buckets
train$age2 <- 0
train$age2[train$age >= 17 & train$age <=21] <- 1
train$age2[train$age >= 22 & train$age <=25] <- 2
train$age2[train$age >= 26 & train$age <=30] <- 3
train$age2[train$age >= 31] <- 4

test$age2 <- 0
test$age2[test$age >= 17 & test$age <=21] <- 1
test$age2[test$age >= 22 & test$age <=25] <- 2
test$age2[test$age >= 26 & test$age <=30] <- 3
test$age2[test$age >= 31] <- 4

#create column for grouping creation of appointment and date of appointment
train$appt2 <- 0
train$appt2[train$apptDiff >= 0 & train$apptDiff <= 1] <- 1
train$appt2[train$apptDiff >= 2 & train$apptDiff <= 3] <- 2
train$appt2[train$apptDiff >= 4 & train$apptDiff <= 6] <- 3
train$appt2[train$apptDiff >= 7] <- 4

test$appt2 <- 0
test$appt2[test$apptDiff >= 0 & test$apptDiff <= 1] <- 1
test$appt2[test$apptDiff >= 2 & test$apptDiff <= 3] <- 2
test$appt2[test$apptDiff >= 4 & test$apptDiff <= 6] <- 3
test$appt2[test$apptDiff >= 7] <- 4

#converting patient no-show risk to numeric values
train$riskLevel[train$risk == 'Low'] <- 0
train$riskLevel[train$risk == 'Low-Medium'] <- 1
train$riskLevel[train$risk == 'Medium'] <- 2
train$riskLevel[train$risk == 'Medium-High'] <- 3
train$riskLevel[train$risk == 'High'] <- 4

test$riskLevel[test$risk == 'Low'] <- 0
test$riskLevel[test$risk == 'Low-Medium'] <- 1
test$riskLevel[test$risk == 'Medium'] <- 2
test$riskLevel[test$risk == 'Medium-High'] <- 3
test$riskLevel[test$risk == 'High'] <- 4

#view the structure of the table after modifications
str(train)

#display total number of patients who missed and kept their appointments, then display as percentages using proportions
table(train$kept)
prop.table(table(train$kept))

#Create a function that takes the subset vector as input and applies both the sum and length commands to it and then does the #division to give us a proportion of patients based on their age bracket and the time of day of their appointment to evaluate
#if both factors together play a role in showing to an appointment
#multiplied by 100 and rounded to create a whole for easier viewing
aggregate(kept ~ age2 + tod, data=train, FUN=function(x) round({sum(x)/length(x) * 100}))

#26-30 year olds had the worse showrate averge, 58.3, due to a 51% rate in the evenings

#lets evaluate the patients risk level and the time of day
aggregate(kept ~ riskLevel + tod, data=train, FUN=function(x) round({sum(x)/length(x) * 100}))

#use rpart to create a model based on the patients risk level, time of date, age bracket 
#and how far out their appointment was booked, then view it using fancyRpartPlot
fit <- rpart(kept ~ riskLevel + tod + age2 + appt2, 
	     data=train, 
	     method="class")
fancyRpartPlot(fit)

#use the rpart prediction function on the test dataframe
Prediction <- predict(fit, test, type = "class")

#compare prediction with what actually happened
predict <- data.frame(kept = test$kept, keptPred = Prediction)

#create a new column that compares actual results with prediction
predict$accu[predict$kept == predict$keptPred] <- 1
predict$accu[predict$kept != predict$keptPred] <- 0

#view the accuracy
prop.table(table(predict$accu))

#Total accuracy of 69.29%

#lets compare random forst with rpart for accuracy
#set seed for reproducability
set.seed(299)

#using importance to compare variables for their level of influence and setting the number of trees to 2000
#If you are using a large dataset reducing the number of trees, using nodesize or sampsize may be necessary.
fit <- randomForest(as.factor(kept) ~ age2 + risk + tod + loc + event + apptDiff,
                data = test,
                importance=TRUE,
		ntree=2000)
#view variable influence
varImpPlot(fit)

#Replace our prediction values
Prediction <- predict(fit, test)
predict <- data.frame(kept = test$kept, keptPred = Prediction)
predict$accu[predict$kept == predict$keptPred] <- 1
predict$accu[predict$kept != predict$keptPred] <- 0
prop.table(table(predict$accu))

#using random forest increased our accuracy to 90.9%
